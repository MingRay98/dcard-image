{"version":3,"sources":["component/image/async.js","component/header/styles.js","component/header/index.jsx","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","resolve","container","display","width","height","maxHeight","flexWrap","margin","fontSize","justifyContent","alignItems","backgroundColor","color","fontWeight","index","props","state","style","styles","Component","Radium","App","getHomePage","getPages","path","render","type","getTypes","para","setState","ps","redirect","openMenu","console","log","ref","menuOpened","document","getElementById","getRedirect","to","handleSubmit","event","preventDefault","target","querySelector","value","fbShare","window","FB","ui","method","action_type","action_properties","JSON","stringify","object","response","error_message","alert","post_id","getNavbar","id","className","transform","left","top","onClick","intput","marginTop","onSubmit","onChange","handleChange","maxWidth","borderRadius","car","this","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","URL","process","href","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f65fb193.chunk.js","sourcesContent":["import {asyncComponent} from 'react-async-component';\r\n\r\nexport default asyncComponent({\r\n  resolve: () => import('./index')\r\n})","export default {\r\n    container: {\r\n        display: 'flex',\r\n        width: '100vw',\r\n        height: '10vw',\r\n        maxHeight: '10vh',\r\n        flexWrap: 'wrap',\r\n        margin: 'auto',\r\n        fontSize: '40px',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#006AA6',\r\n        color: 'white',\r\n        fontWeight: 'bold',\r\n        '@media only screen and (max-width: 550px)': {\r\n            fontSize: '24px',\r\n        },\r\n    },\r\n}","import React, {Component} from 'react';\r\nimport Radium from 'radium';\r\nimport styles from './styles'\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>Dcard-Image Reader</div>\r\n        {/* <label style={{fontSize: '12px'}}><input type=\"radio\" name=\"color1\" value=\"blue\" />熱門</label>\r\n        <label style={{fontSize: '12px'}}><input type=\"radio\" name=\"color1\" value=\"blue\" />最新</label> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(index);","import React, {Component} from \"react\";\r\nimport Radium, {StyleRoot} from 'radium';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\r\nimport AsyncImage from './component/image/async';\r\nimport TopHeader from './component/header';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type: '',\r\n      redirect: false,\r\n      car: false,\r\n    };\r\n    this.menuOpened = true;\r\n    this.ref = null;\r\n  }\r\n\r\n  getHomePage = () => {\r\n    return <TopHeader />\r\n  }\r\n\r\n  getPages = () => {\r\n    return (\r\n      <Switch>\r\n        <Route path={`/dcard-image/`} render={(props) => <AsyncImage {...props} type={this.state.type} />} />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  getTypes = (para) => {\r\n    this.setState((ps) => ({...ps, type: para, redirect: true}))\r\n  }\r\n\r\n  openMenu = () => {\r\n    console.log(this.ref)\r\n    if (this.menuOpened === true) {\r\n      this.menuOpened = false;\r\n      this.ref.style.display = 'none'\r\n      document.getElementById('openButton').style.display = 'block'\r\n    } else {\r\n      this.menuOpened = true;\r\n      this.ref.style.display = 'flex'\r\n      document.getElementById('openButton').style.display = 'none'\r\n    }\r\n  }\r\n\r\n  getRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to={`/dcard-image/`} />;\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.getTypes(event.target.querySelector('input').value)\r\n  }\r\n\r\n  fbShare = () => {\r\n    window.FB.ui({\r\n      method: 'share_open_graph',\r\n      action_type: 'og.shares',\r\n      action_properties: JSON.stringify({\r\n        object: {\r\n          'og:url': 'https://mingray98.github.io/dcard-image/',\r\n          'og:title': 'OG Title',\r\n          'og:description': 'OG Description',\r\n          'og:image': 'https://mingray98.github.io/dcard-image/static/media/back.8613756e.png',\r\n          'og:image:width': '512',\r\n          'og:image:height': '512',\r\n          'og:image:type': 'image/png'\r\n        }\r\n      })\r\n\r\n    },\r\n      // callback\r\n      function (response) {\r\n        if (response && !response.error_message) {\r\n          // then get post content\r\n          alert('successfully posted. Status id : ' + response.post_id);\r\n        } else {\r\n          alert('Something went error.');\r\n        }\r\n      });\r\n  }\r\n\r\n  getNavbar = () => {\r\n    return (\r\n      <div>\r\n        <div id='openButton' className='closeButton'\r\n          style={{transform: 'rotate(180deg)', left: '0px', top: '48vh', display: 'none'}}\r\n          onClick={() => this.openMenu()} />\r\n        <div className='NavBar' ref={intput => this.ref = intput}>\r\n          <div className='closeButton' onClick={() => this.openMenu()} />\r\n          <div className='NavButton' style={{marginTop: '65%'}} onClick={() => this.getTypes('pet')} >寵物</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('show_cats')} >曬貓</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('meme')} >Meme</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('travel')} >旅遊</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('mood')} >心情</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('acg')} >動漫</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"illustration\")} >插畫</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('cosplay')} >COS</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('makeup')} >美妝</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('dressup')} >穿搭</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"otokonoko\")} >偽娘</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"photography\")} >攝影</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"food\")} >食物</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"entertainer\")} >追星</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"trending\")} >時事</div>\r\n          <div className='NavButton' onClick={() => this.fbShare()} >share</div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} style={{width: '10vw', maxWidth: '80px', margin: '2%', borderRadius: '10px'}} />\r\n            </label>\r\n            <button className='NavButton' type=\"submit\" >GO</button>\r\n          </form>\r\n        </div>\r\n      </div >\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <StyleRoot>\r\n          <div className='topContainer'>\r\n            <TopHeader />\r\n            <div className='container'>\r\n              <div className='NavContainer'>\r\n                {this.getNavbar()}\r\n              </div>\r\n              {this.getRedirect()}\r\n              {this.getPages()}\r\n            </div>\r\n          </div>\r\n        </StyleRoot>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}