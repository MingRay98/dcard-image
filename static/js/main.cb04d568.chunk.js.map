{"version":3,"sources":["component/image/async.js","component/header/styles.js","component/header/index.jsx","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","resolve","container","display","width","height","maxHeight","flexWrap","margin","fontSize","justifyContent","alignItems","backgroundColor","color","fontWeight","boxShadow","index","props","state","style","styles","type","name","value","Component","Radium","App","getHomePage","getPages","path","render","getTypes","para","setState","ps","redirect","openMenu","console","log","ref","menuOpened","document","getElementById","getRedirect","to","handleSubmit","event","preventDefault","target","querySelector","car","alert","getNavbar","id","className","transform","left","top","onClick","intput","onSubmit","onChange","handleChange","maxWidth","borderRadius","this","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb04d568.chunk.js","sourcesContent":["import {asyncComponent} from 'react-async-component';\r\n\r\nexport default asyncComponent({\r\n  resolve: () => import('./index')\r\n})","export default {\r\n  container:{\r\n    display: 'flex',\r\n    width: '100vw',\r\n    height: '10vw',\r\n    maxHeight: '10vh',\r\n    flexWrap: 'wrap',\r\n    margin: 'auto',\r\n    fontSize: '40px',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: 'pink',\r\n    color: 'midnightblue',\r\n    fontWeight: 'bold',\r\n    boxShadow: 'inset 0px 0px 7px 1px',\r\n    '@media only screen and (max-width: 550px)': {\r\n      fontSize: '24px',\r\n    },\r\n  },\r\n}","import React, {Component} from 'react';\r\nimport Radium from 'radium';\r\nimport styles from './styles'\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>Dcard-Image Reader</div>\r\n        <label style={{fontSize: '12px'}}><input type=\"radio\" name=\"color1\" value=\"blue\" />熱門</label>\r\n        <label style={{fontSize: '12px'}}><input type=\"radio\" name=\"color1\" value=\"blue\" />最新</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(index);","import React, {Component} from \"react\";\nimport Radium, {StyleRoot} from 'radium';\nimport {withRouter} from 'react-router-dom';\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\nimport AsyncImage from './component/image/async';\nimport TopHeader from './component/header';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: '',\n      redirect: false,\n      car: false,\n    };\n    this.menuOpened = true;\n    this.ref = null;\n  }\n\n  getHomePage = () => {\n    return <TopHeader />\n  }\n\n  getPages = () => {\n    return (\n      <Switch>\n        <Route path=\"/popular\" render={(props) => <AsyncImage {...props} type={this.state.type} />} />\n      </Switch>\n    )\n  }\n\n  getTypes = (para) => {\n    this.setState((ps) => ({...ps, type: para, redirect: true}))\n  }\n\n  openMenu = () => {\n    console.log(this.ref)\n    if (this.menuOpened === true) {\n      this.menuOpened = false;\n      this.ref.style.display = 'none'\n      document.getElementById('openButton').style.display = 'block'\n    } else {\n      this.menuOpened = true;\n      this.ref.style.display = 'flex'\n      document.getElementById('openButton').style.display = 'none'\n    }\n  }\n\n  getRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to='/popular' />;\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    (event.target.querySelector('input').value === '2000' || event.target.querySelector('input').value === 'sex') &&\n      this.setState((ps) => ({...ps, car: true}), alert('開車成功'))\n  }\n\n  getNavbar = () => {\n    return (\n      <div>\n        <div id='openButton' className='closeButton'\n          style={{transform: 'rotate(180deg)', left: '0px', top: '48vh', display: 'none'}}\n          onClick={() => this.openMenu()} />\n        <div className='NavBar' ref={intput => this.ref = intput}>\n          <div className='closeButton' onClick={() => this.openMenu()} />\n          <div className='NavButton' onClick={() => this.getTypes('pet')} >寵物</div>\n          <div className='NavButton' onClick={() => this.getTypes('show_cats')} >曬貓</div>\n          <div className='NavButton' onClick={() => this.getTypes('meme')} >Meme</div>\n          <div className='NavButton' onClick={() => this.getTypes('travel')} >旅遊</div>\n          <div className='NavButton' onClick={() => this.getTypes('mood')} >心情</div>\n          <div className='NavButton' onClick={() => this.getTypes('acg')} >動漫</div>\n          <div className='NavButton' onClick={() => this.getTypes(\"illustration\")} >插畫</div>\n          <div className='NavButton' onClick={() => this.getTypes('cosplay')} >COS</div>\n          <div className='NavButton' onClick={() => this.getTypes('makeup')} >美妝</div>\n          <div className='NavButton' onClick={() => this.getTypes('dressup')} >穿搭</div>\n          <div className='NavButton' onClick={() => this.getTypes(\"otokonoko\")} >偽娘</div>\n          <div className='NavButton' onClick={() => this.getTypes(\"photography\")} >攝影</div>\n          <div className='NavButton' onClick={() => this.getTypes(\"food\")} >食物</div>\n          <div className='NavButton' onClick={() => this.getTypes(\"entertainer\")} >追星</div>\n          <div className='NavButton' onClick={() => this.getTypes(\"trending\")} >時事</div>\n          {this.state.car && <div className='NavButton' onClick={() => this.getTypes(\"sex\")} >西斯</div>}\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} style={{width: '10vw', maxWidth: '125px', margin: '2%', borderRadius: '10px'}} />\n            </label>\n            <button className='NavButton' type=\"submit\" >GO</button>\n          </form>\n        </div>\n      </div >\n    )\n  }\n\n  render() {\n    return (\n      <Router>\n        <StyleRoot>\n          <div className='topContainer'>\n            <TopHeader />\n            <div className='container'>\n              <div className='NavContainer'>\n                {this.getNavbar()}\n              </div>\n              {this.getRedirect()}\n              {this.getPages()}\n            </div>\n          </div>\n        </StyleRoot>\n      </Router>\n    );\n  }\n}\n\nexport default Radium(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}