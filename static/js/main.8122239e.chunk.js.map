{"version":3,"sources":["component/image/async.js","component/header/styles.js","component/header/index.jsx","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","resolve","container","display","width","height","maxHeight","flexWrap","margin","fontSize","justifyContent","alignItems","backgroundColor","color","fontWeight","index","props","state","style","styles","Component","Radium","App","getHomePage","getPages","path","render","type","getTypes","para","setState","ps","redirect","openMenu","console","log","ref","menuOpened","document","getElementById","getRedirect","to","handleSubmit","event","preventDefault","target","querySelector","value","fbShare","window","FB","ui","method","action_type","action_properties","JSON","stringify","object","response","error_message","alert","post_id","getNavbar","id","className","transform","left","top","onClick","intput","marginTop","onSubmit","onChange","handleChange","maxWidth","borderRadius","car","this","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8122239e.chunk.js","sourcesContent":["import {asyncComponent} from 'react-async-component';\r\n\r\nexport default asyncComponent({\r\n  resolve: () => import('./index')\r\n})","export default {\r\n    container: {\r\n        display: 'flex',\r\n        width: '100vw',\r\n        height: '10vw',\r\n        maxHeight: '10vh',\r\n        flexWrap: 'wrap',\r\n        margin: 'auto',\r\n        fontSize: '40px',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#006AA6',\r\n        color: 'white',\r\n        fontWeight: 'bold',\r\n        '@media only screen and (max-width: 550px)': {\r\n            fontSize: '24px',\r\n        },\r\n    },\r\n}","import React, {Component} from 'react';\r\nimport Radium from 'radium';\r\nimport styles from './styles'\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>Dcard-Image Reader</div>\r\n        {/* <label style={{fontSize: '12px'}}><input type=\"radio\" name=\"color1\" value=\"blue\" />熱門</label>\r\n        <label style={{fontSize: '12px'}}><input type=\"radio\" name=\"color1\" value=\"blue\" />最新</label> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(index);","import React, {Component} from \"react\";\r\nimport Radium, {StyleRoot} from 'radium';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\r\nimport AsyncImage from './component/image/async';\r\nimport TopHeader from './component/header';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type: '',\r\n      redirect: false,\r\n      car: false,\r\n    };\r\n    this.menuOpened = true;\r\n    this.ref = null;\r\n  }\r\n\r\n  getHomePage = () => {\r\n    return <TopHeader />\r\n  }\r\n\r\n  getPages = () => {\r\n    return (\r\n      <Switch>\r\n        <Route path={`/dcard-image/`} render={(props) => <AsyncImage {...props} type={this.state.type} />} />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  getTypes = (para) => {\r\n    this.setState((ps) => ({...ps, type: para, redirect: true}))\r\n  }\r\n\r\n  openMenu = () => {\r\n    console.log(this.ref)\r\n    if (this.menuOpened === true) {\r\n      this.menuOpened = false;\r\n      this.ref.style.display = 'none'\r\n      document.getElementById('openButton').style.display = 'block'\r\n    } else {\r\n      this.menuOpened = true;\r\n      this.ref.style.display = 'flex'\r\n      document.getElementById('openButton').style.display = 'none'\r\n    }\r\n  }\r\n\r\n  getRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to={`/dcard-image/`} />;\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.getTypes(event.target.querySelector('input').value)\r\n  }\r\n\r\n  fbShare = () => {\r\n    window.FB.ui({\r\n      method: 'share_open_graph',\r\n      action_type: 'og.shares',\r\n      action_properties: JSON.stringify({\r\n        object: {\r\n          'og:url': 'https://mingray98.github.io/dcard-image/',\r\n          'og:title': 'OG Title',\r\n          'og:description': 'OG Description',\r\n          'og:image': 'https://mingray98.github.io/dcard-image/static/media/back.8613756e.png',\r\n          'og:image:width': '512',\r\n          'og:image:height': '512',\r\n          'og:image:type': 'image/png'\r\n        }\r\n      })\r\n\r\n    },\r\n      // callback\r\n      function (response) {\r\n        if (response && !response.error_message) {\r\n          // then get post content\r\n          alert('successfully posted. Status id : ' + response.post_id);\r\n        } else {\r\n          alert('Something went error.');\r\n        }\r\n      });\r\n  }\r\n\r\n  getNavbar = () => {\r\n    return (\r\n      <div>\r\n        <div id='openButton' className='closeButton'\r\n          style={{transform: 'rotate(180deg)', left: '0px', top: '48vh', display: 'none'}}\r\n          onClick={() => this.openMenu()} />\r\n        <div className='NavBar' ref={intput => this.ref = intput}>\r\n          <div className='closeButton' onClick={() => this.openMenu()} />\r\n          <div className='NavButton' style={{marginTop: '65%'}} onClick={() => this.getTypes('pet')} >寵物</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('show_cats')} >曬貓</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('meme')} >Meme</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('travel')} >旅遊</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('mood')} >心情</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('acg')} >動漫</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"illustration\")} >插畫</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('cosplay')} >COS</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('makeup')} >美妝</div>\r\n          <div className='NavButton' onClick={() => this.getTypes('dressup')} >穿搭</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"otokonoko\")} >偽娘</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"photography\")} >攝影</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"food\")} >食物</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"entertainer\")} >追星</div>\r\n          <div className='NavButton' onClick={() => this.getTypes(\"trending\")} >時事</div>\r\n          <div className='NavButton' onClick={() => this.fbShare()} >share</div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} style={{width: '10vw', maxWidth: '80px', margin: '2%', borderRadius: '10px'}} />\r\n            </label>\r\n            <button className='NavButton' type=\"submit\" >GO</button>\r\n          </form>\r\n        </div>\r\n      </div >\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <StyleRoot>\r\n          <div className='topContainer'>\r\n            <TopHeader />\r\n            <div className='container'>\r\n              <div className='NavContainer'>\r\n                {this.getNavbar()}\r\n              </div>\r\n              {this.getRedirect()}\r\n              {this.getPages()}\r\n            </div>\r\n          </div>\r\n        </StyleRoot>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}